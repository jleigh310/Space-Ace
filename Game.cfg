# -----	MEMORY section ------------------------------------------------------------

MEMORY {
	ZP:		start=$0000, size=$0100, type=rw;
	STACK:	start=$0100, size=$0100, type=rw;
	OAM:	start=$0200, size=$0100, type=rw;
	RAM:	start=$0300, size=$0500, type=rw;
	
	HDR:	start=$0000, size=$0010, type=ro, file=%O, fill=yes, fillval=$00;

	# Each 16K ROM bank is divided into 2 * 8K chunks (first bank is $00 and $01)
	ROM000:	start=$8000, size=$4000, type=ro, file=%O, fill=yes, fillval=$00;
#	ROM002:	start=$8000, size=$4000, type=ro, file=%O, fill=yes, fillval=$00;
#	ROM004:	start=$8000, size=$4000, type=ro, file=%O, fill=yes, fillval=$00;
	ROM062:	start=$C000, size=$4000, type=ro, file=%O, fill=yes, fillval=$00;

	# Each 8K CHR bank is divided into 8 * 1K chunks (first bank is $00 through $07)
	CHR000:	start=$0000, size=$2000, type=ro, file=%O, fill=yes, fillval=$CC;
	
	DATA:	start=$6000, size=$4000, type=rw;
}

# -----	SEGMENTS section ------------------------------------------------------------

SEGMENTS {
	ZEROPAGE:	load=ZP,	type=zp;
	BSS:		load=RAM,	type=bss,	define=yes;
	HEADER:		load=HDR,	type=ro;

	CODE00:		load=ROM000,	type=ro,	optional=yes;
	RODATA00:	load=ROM000,	type=ro,	align=$0100,	optional=yes;
#	CODE01:		load=ROM002,	type=ro,	optional=yes;
#	RODATA01:	load=ROM002,	type=ro,	align=$0100,	optional=yes;
#	CODE02:		load=ROM004,	type=ro,	optional=yes;
#	RODATA02:	load=ROM004,	type=ro,	align=$0100,	optional=yes;
	                    
	DPCM:		load=ROM062,	type=ro,	align=$0040,	optional=yes;
	CODE:		load=ROM062,	type=ro,	align=$0100;
	RODATA:		load=ROM062,	type=ro,	align=$0100,	optional=yes;
	STUB:		load=ROM062,	type=ro,	start=$FFED;
	VECTORS:	load=ROM062,	type=ro,	start=$FFFA;
	
	TILE00:		load=CHR000,	type=ro,	optional=yes;
	
	DATA:		load=DATA,	type=rw,	optional=yes;
}
